#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Or√°culo de Concursos - Bot Discord para Prepara√ß√£o de Concursos P√∫blicos
Ponto de entrada principal da aplica√ß√£o
"""

import asyncio
import logging
import os
import signal
import sys
import discord
from pathlib import Path

# Adicionar o diret√≥rio raiz ao path para imports
sys.path.append(str(Path(__file__).parent))

from bot.discord_bot import OraculoBot
from database.db_manager import DatabaseManager
from utils.logger import configurar_logger
from utils.debug_logger import get_debug_logger, debug_async_func, MonitorDiscord
from bot.config import Config
from bot.gemini_client import GeminiClient
from bot.anti_alucinacao import ValidadorConfianca


class OraculoApp:
    """Classe principal da aplica√ß√£o Or√°culo de Concursos"""
    
    def __init__(self):
        self.bot = None
        self.db_manager = None
        self.logger = None
        self.debug = get_debug_logger()
        self._running = False
    
    @debug_async_func
    async def inicializar(self):
        """Inicializa todos os componentes da aplica√ß√£o"""
        try:
            # Configurar logging
            self.debug.registrar_evento("INIT_START")
            self.logger = configurar_logger()
            self.logger.info("üöÄ Iniciando Or√°culo de Concursos...")
            
            # Debug do ambiente
            self.debug.debug_ambiente()
            self.debug.debug_rede()
            
            # Validar configura√ß√µes
            self.debug.registrar_evento("CONFIG_START")
            config = Config()
            if not config.is_valid():
                self.debug.registrar_evento("CONFIG_INVALID")
                if self.logger:
                    self.logger.error("‚ùå Configura√ß√µes inv√°lidas. Verifique as vari√°veis de ambiente.")
                return False
            self.debug.registrar_evento("CONFIG_VALID")
            
            # Inicializar banco de dados
            self.debug.registrar_evento("DB_INIT_START")
            self.logger.info("üìä Inicializando banco de dados...")
            self.db_manager = DatabaseManager(config.database_path)
            
            # Testar inicializa√ß√£o completa do banco
            try:
                await self.db_manager.inicializar()
                self.debug.registrar_evento("DB_INIT_SUCCESS")
                self.logger.info("üìä Banco de dados inicializado com sucesso")
            except Exception as db_error:
                self.debug.debug_excecao(db_error, "inicializa√ß√£o do banco")
                self.logger.warning("‚ö†Ô∏è Erro no banco, continuando sem persist√™ncia: {db_error}")
                self.debug.registrar_evento("DB_INIT_FAILED", {"erro": str(db_error)})

            # Inicializar componentes
            gemini_client = GeminiClient(config)
            validador = ValidadorConfianca(config)
            
            # Inicializar bot Discord
            self.debug.registrar_evento("BOT_INIT_START")
            self.logger.info("ü§ñ Inicializando bot Discord...")
            self.bot = OraculoBot(self.db_manager, gemini_client, validador, config)
            self.config = config
            
            # Adicionar monitoramento ao bot
            monitor = MonitorDiscord(self.debug)
            monitor.monitorar_bot(self.bot)
            
            self.debug.registrar_evento("BOT_INIT_SUCCESS")
            self.logger.info("‚úÖ Todos os componentes inicializados com sucesso!")
            return True
            
        except Exception as e:
            self.debug.debug_excecao(e, "inicializa√ß√£o da aplica√ß√£o")
            if self.logger:
                self.logger.error("‚ùå Erro durante inicializa√ß√£o: {e}")
            else:
                print("‚ùå Erro durante inicializa√ß√£o: {e}")
            return False
    
    async def executar(self):
        """Executa o bot principal"""
        if not await self.inicializar():
            sys.exit(1)
        
        try:
            self._running = True
            self.logger.info("üéØ Or√°culo de Concursos est√° online e pronto para ajudar!")
            
            # Configurar handlers para shutdown graceful
            for sig in (signal.SIGTERM, signal.SIGINT):
                signal.signal(sig, self._signal_handler)
            
            # Executar o bot
            if self.bot:
                self.debug.registrar_evento("DISCORD_CONNECT_START")
                self.logger.info(f"üîå Conectando com token: {self.config.discord_token[:8]}...")
                
                # Debug do cliente antes da conex√£o
                self.debug.debug_discord_client(self.bot)
                
                try:
                    # Usar timeout estendido para conex√£o
                    self.debug.registrar_evento("DISCORD_START_CALL")
                    await asyncio.wait_for(
                        self.bot.start(self.config.discord_token),
                        timeout=60.0  # Aumentado para 60 segundos
                    )
                    self.debug.registrar_evento("DISCORD_CONNECT_SUCCESS")
                    
                except asyncio.TimeoutError:
                    self.debug.registrar_evento("DISCORD_TIMEOUT")
                    self.logger.error("‚ùå Timeout na conex√£o Discord ap√≥s 60 segundos")
                    
                    # Salvar relat√≥rio de debug antes de falhar
                    relatorio_path = self.debug.salvar_relatorio()
                    self.logger.error(f"üìã Relat√≥rio de debug salvo em: {relatorio_path}")
                    raise
                    
                except discord.LoginFailure as e:
                    self.debug.debug_excecao(e, "autentica√ß√£o Discord")
                    self.logger.error(f"‚ùå Falha na autentica√ß√£o Discord: {e}")
                    raise
                    
                except discord.HTTPException as e:
                    self.debug.debug_excecao(e, "HTTP Discord")
                    self.logger.error(f"‚ùå Erro HTTP Discord: {e}")
                    raise
                    
                except Exception as e:
                    self.debug.debug_excecao(e, "conex√£o Discord inesperada")
                    self.logger.error(f"‚ùå Erro inesperado na conex√£o Discord: {e}")
                    raise
            
        except KeyboardInterrupt:
            self.debug.registrar_evento("USER_INTERRUPT")
            if self.logger:
                self.logger.info("‚èπÔ∏è Interrup√ß√£o pelo usu√°rio...")
        except Exception as e:
            self.debug.debug_excecao(e, "execu√ß√£o principal")
            if self.logger:
                self.logger.error(f"‚ùå Erro durante execu√ß√£o: {e}")
        finally:
            # Gerar relat√≥rio final antes de finalizar
            if self.debug:
                relatorio_path = self.debug.salvar_relatorio()
                if self.logger:
                    self.logger.info(f"üìã Relat√≥rio final de debug: {relatorio_path}")
            
            await self.finalizar()
    
    def _signal_handler(self, signum, frame):
        """Handler para sinais de sistema"""
        if self.logger:
            self.logger.info(f"üì® Sinal {signum} recebido. Iniciando shutdown graceful...")
        self._running = False
        
        # Criar task para finaliza√ß√£o ass√≠ncrona
        asyncio.create_task(self.finalizar())
    
    async def finalizar(self):
        """Finaliza todos os componentes da aplica√ß√£o"""
        if not self._running:
            return
        
        self._running = False
        if self.logger:
            self.logger.info("üîÑ Finalizando Or√°culo de Concursos...")
        
        try:
            # Fechar conex√£o do bot
            if self.bot and not self.bot.is_closed():
                await self.bot.close()
            
            # Fechar conex√£o do banco
            if self.db_manager:
                # O aiosqlite n√£o tem um m√©todo close() expl√≠cito no manager
                pass
            
            if self.logger:
                self.logger.info("‚úÖ Shutdown completado com sucesso!")
            
        except Exception as e:
            if self.logger:
                self.logger.error(f"‚ùå Erro durante finaliza√ß√£o: {e}")


async def main():
    """Fun√ß√£o principal"""
    app = OraculoApp()
    await app.executar()


if __name__ == "__main__":
    try:
        # Verificar vers√£o do Python
        if sys.version_info < (3, 8):
            print("‚ùå Python 3.8+ √© necess√°rio para executar o Or√°culo de Concursos")
            sys.exit(1)
        
        # Executar aplica√ß√£o
        asyncio.run(main())
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Aplica√ß√£o interrompida pelo usu√°rio")
    except Exception as e:
        print(f"‚ùå Erro fatal: {e}")
        sys.exit(1)