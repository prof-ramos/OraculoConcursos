"""
Configura√ß√µes e constantes do Or√°culo de Concursos P√∫blicos
"""

import os
from typing import Optional


class Config:
    """Classe para gerenciar configura√ß√µes do bot"""
    
    def __init__(self):
        """Inicializa configura√ß√µes a partir de vari√°veis de ambiente"""
        self.discord_token: str = os.getenv("DISCORD_TOKEN", "")
        self.gemini_api_key: str = os.getenv("GEMINI_API_KEY", "")
        self.database_path: str = os.getenv("DATABASE_PATH", "oraculo_concursos.db")
        
        # Configura√ß√µes de comportamento
        self.confidence_threshold: float = float(os.getenv("CONFIDENCE_THRESHOLD", "0.9"))
        self.max_response_length: int = int(os.getenv("MAX_RESPONSE_LENGTH", "2000"))
        self.context_memory_limit: int = int(os.getenv("CONTEXT_MEMORY_LIMIT", "10"))
        
        # Prefixos e comandos
        self.bot_name: str = os.getenv("BOT_NAME", "Or√°culo")
        self.default_model: str = os.getenv("GEMINI_MODEL", "gemini-2.5-pro")
        
        # Configura√ß√µes de streaming
        self.enable_streaming: bool = os.getenv("ENABLE_STREAMING", "true").lower() == "true"
        self.stream_chunk_size: int = int(os.getenv("STREAM_CHUNK_SIZE", "100"))
    
    def is_valid(self) -> bool:
        """Valida se as configura√ß√µes essenciais est√£o presentes"""
        required_vars = [
            ("DISCORD_TOKEN", self.discord_token),
            ("GEMINI_API_KEY", self.gemini_api_key)
        ]
        
        missing_vars = []
        for var_name, var_value in required_vars:
            if not var_value or var_value.strip() == "":
                missing_vars.append(var_name)
        
        if missing_vars:
            print(f"‚ùå Vari√°veis de ambiente obrigat√≥rias n√£o encontradas: {', '.join(missing_vars)}")
            return False
        
        return True
    
    @property
    def system_prompt(self) -> str:
        """Prompt do sistema especializado em concursos p√∫blicos brasileiros"""
        return """Voc√™ √© o Or√°culo de Concursos P√∫blicos, um assistente especializado em prepara√ß√£o para concursos p√∫blicos brasileiros.

DIRETRIZES FUNDAMENTAIS:
- Responda APENAS quando tiver 90% ou mais de confian√ßa na resposta
- Se n√£o tiver certeza, seja honesto e diga "N√£o tenho certeza suficiente para responder"
- Foque exclusivamente em conte√∫do relacionado a concursos p√∫blicos brasileiros
- Sempre cite fontes quando poss√≠vel (leis, decretos, jurisprud√™ncia)
- Use linguagem clara e did√°tica
- Forne√ßa exemplos pr√°ticos quando apropriado

√ÅREAS DE ESPECIALIZA√á√ÉO:
- Direito Constitucional, Administrativo, Civil, Penal, Trabalhista
- Legisla√ß√£o espec√≠fica de √≥rg√£os p√∫blicos
- T√©cnicas de estudo e prepara√ß√£o
- Resolu√ß√£o de quest√µes de concurso
- Dicas de prova e gest√£o de tempo
- Portugu√™s para concursos
- Matem√°tica e Racioc√≠nio L√≥gico
- Conhecimentos Gerais e Atualidades

FORMATO DE RESPOSTA:
- Seja conciso mas completo
- Use estrutura clara com t√≥picos quando necess√°rio
- Inclua refer√™ncias legais quando aplic√°vel
- Termine sempre com uma dica pr√°tica

Lembre-se: Qualidade e precis√£o s√£o mais importantes que velocidade de resposta."""


# Constantes do sistema
COMMAND_PREFIXES = ["!oraculo", "!concurso", "!estudar"]
MAX_MESSAGE_HISTORY = 50
DATABASE_SCHEMA_VERSION = "1.0"

# Mensagens padr√£o em portugu√™s
MESSAGES = {
    "bot_ready": "üéØ Or√°culo de Concursos P√∫blicos est√° online e pronto para auxiliar nos estudos!",
    "mention_required": "üì¢ Para uma experi√™ncia melhor, me mencione (@{bot_name}) em suas perguntas!",
    "confidence_low": "ü§î N√£o tenho certeza suficiente para responder essa pergunta. Pode reformular ou ser mais espec√≠fico?",
    "error_occurred": "‚ùå Ops! Ocorreu um erro. Tente novamente em alguns instantes.",
    "processing": "üß† Analisando sua pergunta sobre concursos p√∫blicos...",
    "thinking": "üí≠ Pensando...",
    "no_context": "‚ùì N√£o consegui encontrar contexto suficiente. Pode ser mais espec√≠fico sobre o concurso ou mat√©ria?"
}
